{"version":3,"sources":["components/navbar/menu/Menu.js","components/navbar/Navbar.js","components/table/TableForm.js","components/dolls/Dolls.js","App.js","serviceWorker.js","index.js"],"names":["Menu","to","Navbar","TableForm","props","useState","data","handleDelete","event","a","async","axios","delete","target","value","listDolls","map","doll","Table","Row","key","uuid","Cell","_id","name","priceBought","dateBought","sold","priceSold","dateSold","boughtBy","shippingAddress","onClick","celled","Header","HeaderCell","Body","Dolls","setData","search","setSearch","setName","setPriceBought","setDateBought","setSold","setPriceSold","setDateSold","setBoughtBy","setShippingAddress","postData","setPostData","useEffect","result","console","log","fetchData","handleClick","addToData","post","onSubmit","preventDefault","type","onChange","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd20dfc3.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nfunction Menu() {\n  return (\n    <div>\n      <Link to=\"dolls\">Dolls</Link>\n      <Link to=\"/\">Home</Link>\n    </div>\n  )\n}\n\nexport default Menu","import React from 'react'\nimport Menu from './menu/Menu'\n\nfunction Navbar() {\n  return (\n    <div>\n      <Menu />\n    </div>\n  )\n}\n\nexport default Navbar","import React, { useEffect, useState } from 'react'\nimport { Icon, Label, Menu, Table } from 'semantic-ui-react'\nimport axios from 'axios'\nimport uuid from 'react-uuid'\n\nfunction TableForm (props) {\n  const [deleteId, setDeleteId] = useState()\n  const data = props.data\n\n\n  const handleDelete = async (event) => {\n    await axios.delete(('dolls/' + event.target.value))\n  }\n\n  const listDolls = data.map(doll => \n    <Table.Row key={uuid()}>\n      <Table.Cell>{doll._id}</Table.Cell>\n      <Table.Cell>{doll.name}</Table.Cell>\n      <Table.Cell>{doll.priceBought}</Table.Cell>\n      <Table.Cell>{doll.dateBought}</Table.Cell>\n      <Table.Cell>{doll.sold ? <p>YES</p> : <p>NO</p>}</Table.Cell>\n      <Table.Cell>{doll.priceSold}</Table.Cell>\n      <Table.Cell>{doll.dateSold}</Table.Cell>\n      <Table.Cell>{doll.boughtBy}</Table.Cell>\n      <Table.Cell>{doll.shippingAddress}</Table.Cell>\n      <Table.Cell> <button value={doll._id} onClick={handleDelete}>DELETE</button> </Table.Cell>\n    </Table.Row>\n  )\n\n  return(\n    <div>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>ID</Table.HeaderCell>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Price bought</Table.HeaderCell>\n            <Table.HeaderCell>Date bought</Table.HeaderCell>\n            <Table.HeaderCell>Sold</Table.HeaderCell>\n            <Table.HeaderCell>Price sold</Table.HeaderCell>\n            <Table.HeaderCell>Date sold</Table.HeaderCell>\n            <Table.HeaderCell>Bought by</Table.HeaderCell>\n            <Table.HeaderCell>Shipping address</Table.HeaderCell>\n            <Table.HeaderCell>Options</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {listDolls}\n        </Table.Body>\n      </Table>\n    </div>\n  )\n}\n\nexport default TableForm","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport TableForm from '../table/TableForm'\nimport $ from 'jquery'\n\nfunction Dolls() {\n  const [data, setData] = useState([])\n  const [search, setSearch] = useState(\"dolls\")\n  const [name, setName] = useState()\n  const [priceBought, setPriceBought] = useState()\n  const [dateBought, setDateBought] = useState()\n  const [sold, setSold] = useState()\n  const [priceSold, setPriceSold] = useState()\n  const [dateSold, setDateSold] = useState()\n  const [boughtBy, setBoughtBy] = useState()\n  const [shippingAddress, setShippingAddress] = useState()\n  const [postData, setPostData] = useState({\n    name: \"\",\n    priceBought: null,\n    dateBought: \"\",\n    sold: null,\n    dateSold: \"\",\n    boughtBy: \"\",\n    shippingAddress: \"\"\n  })\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(search)\n      setData(result.data)\n      console.log(result.data)\n    } \n    fetchData()\n  }, [search])\n\n  const handleClick = (event) => {\n    setSearch(event.target.value)\n  }\n\n  const addToData = async () => {\n    await axios.post('/dolls', postData)\n  }\n\n  const handleName = (event) => {\n    setName(event.target.value)\n    console.log(event.target.value)\n  }\n\n  const handlePriceBought = (event) => {\n    setPriceBought(event.target.value)\n    console.log(event.target.value)\n  }\n\n  const handleDateBought = (event) => {\n    setDateBought(event.target.value)\n    console.log(event.target.value)\n  }\n\n  const handleSold = (event) => {\n    setSold(event.target.value)\n    console.log(event.target.value)\n  }\n\n  const handlePriceSold = (event) => {\n    setPriceSold(event.target.value)\n    console.log(event.target.value)\n  }\n\n  const handleDateSold = (event) => {\n    setDateSold(event.target.value)\n    console.log(event.target.value)\n  }\n\n  const handleBoughtBy = (event) => {\n    setBoughtBy(event.target.value)\n    console.log(event.target.value)\n  }\n\n  const handleShippingAddress = (event) => {\n    setShippingAddress(event.target.value)\n    console.log(event.target.value)\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    setPostData({\n      name: name,\n      priceBought: priceBought,\n      dateBought: dateBought,\n      sold: true,\n      dateSold: dateSold,\n      boughtBy: boughtBy,\n      shippingAddress: shippingAddress\n    })\n  }\n\n  console.log(postData)\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label>Name: <input name=\"name\" type=\"text\" onChange={handleName} /></label>\n        <label>Price bought: <input name=\"priceBought\" type=\"number\" onChange={handlePriceBought} /></label>\n        <label>Date bought: <input name=\"dateBought\" type=\"text\" onChange={handleDateBought} /></label>\n        <label>Sold: <input name=\"dateBought\" type=\"text\" onChange={handleSold} /></label>\n        <label>Price sold: <input name=\"priceSold\" type=\"number\" onChange={handlePriceSold} /></label>\n        <label>Date sold: <input name=\"dateSold\" type=\"text\" onChange={handleDateSold} /></label>\n        <label>Bought by: <input name=\"boughtBy\" type=\"text\" onChange={handleBoughtBy} /></label>\n        <label>Shipping address: <input name=\"shippingAddress\" type=\"text\" onChange={handleShippingAddress} /></label>\n        <input type=\"submit\" value=\"Submit\"/>\n      </form>\n      <button onClick={addToData}>LALA</button>\n      <button value=\"dolls\" onClick={handleClick}>All dolls</button>\n      <button value=\"dolls/sold\" onClick={handleClick}>Sold dolls</button>\n      <button value=\"dolls/notsold\" onClick={handleClick}>Available dolls</button>\n      <button onClick={addToData}>SEND</button>\n      <TableForm data={data}/>\n    </div>\n  )\n}\n\nexport default Dolls","import React, { useState, useEffect } from 'react';\nimport axios from 'axios'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Navbar from './components/navbar/Navbar';\nimport Dolls from './components/dolls/Dolls'\n\n\nconst App = () => {\n  return (\n    <div>\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route path=\"/dolls\">\n            <Dolls />\n          </Route>\n          <Route path=\"/\">\n            <div>this is home</div>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}